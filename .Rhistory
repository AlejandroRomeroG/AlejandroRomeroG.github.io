ls
quarto render
quarto render
library(dplyr, openxlsx)
library(openxlsx)
install.packages("gridExtra")
library(gridExtra)
setwd("~/OneDrive - CIDE/R/AlejandroRomeroG.github.io/blog/ENIF-ENAFIN")
setwd("~/OneDrive - CIDE/R/AlejandroRomeroG.github.io")
}
return(print(plot_acw))
library(dplyr) # para la manipulación de datos
library(ggplot2) # para la creación de gráficos
getBinaryRule <- function(ruleNumber) {
# Convierte el número en una secuencia de bits:
ruleBinary <- intToBits(ruleNumber)[1:8]
# Convierte la secuencia de bits en un vector de enteros:
ruleBinary <- as.integer(rev(ruleBinary))
return(ruleBinary)
}
ACW <- function(Regla) {
# Selecciona la regla número 135:
ruleNumber <- Regla
# Convierte la regla a su representación binaria:
ruleSet <- getBinaryRule(ruleNumber)
# Establece el número de células y generaciones para la simulación:
numCells <- 101
generations <- 101
# Crea una matriz para representar cada generación de células:
grid <- matrix(nrow = generations, ncol = numCells)
# Inicializa todas las células en estado inactivo (0):
cells <- rep(0, numCells)
# Activa la célula central:
cells[ceiling(numCells / 2)] <- 1
# Establece la configuración previa como la primera generación en nuestra matriz:
grid[1, ] <- cells
# Bucle a través de cada generación, empezando por la segunda:
for (gen in 2:generations) {
# Bucle a través de cada célula en la generación:
for (i in 1:numCells) {
# Calcula los índices de las vecinas izquierda y derecha,
# considerando condiciones de frontera periódicas
# (si la célula está en el borde, la vecina es la primera o la última):
left_index <- ifelse(i == 1, numCells, i - 1)
right_index <- ifelse(i == numCells, 1, i + 1)
# Obtiene los estados de las vecinas y de la célula central:
left <- grid[gen - 1, left_index]
center <- grid[gen - 1, i]
right <- grid[gen - 1, right_index]
# Calcula el patrón de vecindario en versión entera (nota más adelante):
neighborhood <- left * 4 + center * 2 + right
# Determina el nuevo estado basado en la respectiva regla:
grid[gen, i] <- ruleSet[8 - neighborhood]
}
}
# Crea un data frame con todas las combinaciones de células y generaciones:
df <- expand.grid(x = 1:numCells, y = 1:generations)
# Asigna los valores de la cuadrícula al data frame, ajustando la estructura.
# La transposición cambia las filas por columnas y viceversa para que cada
# columna represente una generación y cada fila una célula.
# La función as.vector() convierte la matriz en un vector para que podamos ir
# asignando valores de generación en generación, como esta creado el data frame:
df$value <- as.vector(t(grid))
# Ajusta el eje y para que las generaciones se muestren en el orden correcto
# (de arriba a abajo):
df$y <- generations - df$y + 1
# Crea un gráfico con ggplot2:
plot_acw <- ggplot(df, aes(x = x, y = y, fill = factor(value))) +
geom_tile() + # Crea un gráfico de mosaico
scale_fill_manual(values = c("white", "black")) + # Define los colores
theme(legend.position = "none", # Elimina la leyenda
panel.grid = element_blank(), # Elimina las líneas de la cuadrícula
axis.title = element_blank(), # Elimina los títulos de los ejes
axis.text = element_blank(), # Elimina las etiquetas de los ejes
axis.ticks = element_blank(), # Elimina las marcas de los ejes
panel.background = element_blank(), # Elimina el fondo del panel
panel.border = element_blank()) # Elimina el borde del panel
return(print(plot_acw))
}
ACW(135)
quarto render
quarto render
setwd("~/OneDrive - CIDE/R/AlejandroRomeroG.github.io/blog/DOF-CAMBIO-TASAS")
quarto render
