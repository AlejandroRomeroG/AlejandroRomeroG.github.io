{
  "hash": "bbec5fc8671d300502e4bc8eb2ca9bcb",
  "result": {
    "markdown": "---\ntitle: \"Presentaciones desde RStudio con `{xaringan}`\"\ndescription: |\n  En este tutorial muestro cómo crear presentaciones dinámicas desde RStudio mediante el uso del paquete `{xaringan}`.\ndate: 2023-11-14\ncategories: [R, Tutorial]\nimage: xaringan.png\ndraft: false\n---\n\n\nPrimero, necesitamos instalar y cargar los paquetes necesarios:\n\n``` r\ninstall.packages(c(\"pagedown\", \"xaringan\"), dependencies = TRUE)\nlibrary(pagedown)\nlibrary(xaringan)\n```\n\nAhora, para generar nuestra primer presentación, pondremos la siguiente estructura en un archivo .Rmd vacío:\n\n``` r\n---\ntitle: \"Práctica 1\"\nsubtitle: \"Presentación hecha con {xaringan}\"\nauthor: \"Alejandro Romero González\"\ndate: \"10/25/2021\"\noutput:\n    xaringan::moon_reader:\n      css: [\"default\"]\n      nature:\n        highlightStyle: github\n        highlighLine: true\n        countIncrementalSlides: true\n---\n```\n\nAl guardar dicho archivo y después darle clic a *Knit*, RStudio compilará un html con el siguiente contenido:\n\n![](uno.png)\n\nPodrás ver que la presentación se ve un poco fea. Para darle un mejor estilo podemos [crear nuestro propio tema](https://cran.r-project.org/web/packages/xaringanthemer/vignettes/xaringanthemer.html) o utilizar los temas precargados. Estos últimos podemos visualizarlos escribiendo lo siguiente en la consola:\n\n``` r\nnames(xaringan:::list_css())\n```\n\nYo escogeré la fuente \"tamu-fonts\" y el tema \"shinobi\". Se aplican en el .Rmd de la siguiente manera:\n\n``` r\n---\ntitle: \"Práctica 1\"\nsubtitle: \"Presentación hecha con {xaringan}\"\nauthor: \"Alejandro Romero González\"\ndate: \"10/25/2021\"\noutput:\n    xaringan::moon_reader:\n      css: [\"default\", \"tamu-fonts\", \"shinobi\"]\n      nature:\n        highlightStyle: github\n        highlighLine: true\n        countIncrementalSlides: true\n---\n```\n\nGuardamos y compilamos de nuevo. El *output* ahora es este:\n\n![](dos.png)\n\nYa se ve mejor. Sin embargo, está algo tedioso que una ventana adicional aparezca para poder visualizar la presentación. Es por ello que existe *Infinite Moon Reader*: éste *addin* nos permitirá visualizar la presentación en el *viewer* que está integrado a RStudio (como cuando visualizamos gráficas de `{ggplot2}`). Para activarlo solo es necesario darle clic al botón *Addins* que se encuentra en la parte superior de RStudio, buscar *Infinite Moon Reader* y oprimir clic de nuevo (si saltan avisos de que necesitamos instalar o actualizar algunos paquetes, les damos aceptar). Con esto, ya podremos visualizar la presentación desde Rstudio actualizándose en tiempo real (la mayor parte de las veces).\n\nNota: si *Infinite Moon Reader* no aparece en *Addins*, reinstalen el paquete `{xaringan}`, pero ahora desde la repo oficial en Github:\n\n``` r\nremotes::install_github(\"yihui/xaringan\")\n```\n\nPara crear nuevas diapositivas simplemente tenemos que escribir debajo del área donde definimos el título, subtítulo, etc., e ir separando diapositiva por diapositiva con tres guiones. Ejemplo:\n\n``` r\n---\ntitle: \"Práctica 1\"\nsubtitle: \"Presentación hecha con {xaringan}\"\nauthor: \"Alejandro Romero González\"\ndate: \"10/25/2021\"\noutput:\n    xaringan::moon_reader:\n      css: [\"default\", \"tamu-fonts\", \"shinobi\"]\n      nature:\n        highlightStyle: github\n        highlighLine: true\n        countIncrementalSlides: true\n---\n\nclass: inverse\n\n# Mi primera diapositiva\n\nEsto es un texto\n  - Elemento 1\n  - Elemento 2\n  \n  1. Uno\n  2. Dos\n  3. Tres\n  \n---\n\n# Mi segunda diapositiva\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n```\n\n*Output*:\n\n\n```{=html}\n<div style=\"display: flex; justify-content: center; align-items: center;\">\n    <img src=\"tres.png\" style=\"max-width: 55%; height: auto; padding: 0px;\">\n    <img src=\"cuatro.png\" style=\"max-width: 55%; height: auto; padding: 0px;\">\n</div>\n```\n\n\nNota: el color de fondo predeterminado del tema que escogí es el blanco, sin embargo lo cambié al color inverso con \"class: inverse\", como se puede ver en el código de arriba.\n\nPara poner links a una página web dentro de una diapositiva podemos hacerlo de tres maneras:\n\n``` r\n---\n\n# Diapositiva con links\n\n- Simplemente poner el link: https://cran.r-project.org/\n\n- Usar sintaxis de Rmarkdown: [link a CRAN](https://cran.r-project.org/)\n\n<br/><br/><br/>\n\n- Usar sintaxis de HTML\n<a href=\"https://cran.r-project.org/\">\n  Link a CRAN con a href\n</a>\n```\n\n*Output*:\n\n![](cinco.png)\n\nSi queremos insertar código y gráficas de R simplemente tenemos que insertar un nuevo code chunk y escribir nuestras instrucciones:\n\n````r\n---\n\n# Diapositiva con código y gráficas de R\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mpg) +\n    aes(cty, hwy) +\n    geom_point() +\n    ggtitle(\"Fuel efficiency!\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=300px}\n:::\n:::\n````\n\n*Output*:\n\n![](seis.png)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}