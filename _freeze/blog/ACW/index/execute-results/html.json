{
  "hash": "3e71878dc7f5325cddfb0631d6d7647f",
  "result": {
    "markdown": "---\ntitle: \"Implementación de los Autómatas Celulares de Wolfram en R\"\ndescription: |\n  En este artículo, presento una exploración práctica de los ACW, utilizando R y `{ggplot2}` para la visualización. Esta implementación busca ilustrar cómo reglas sencillas pueden dar lugar a dinámicas, a veces, impredecibles.\ndate: 2024-01-23\ncategories: [R, Tutorial, Visualización, Autómatas Celulares]\nimage: acw_135_rect.png \ndraft: false\nengine: knitr\nwebr: \n  show-startup-message: true\n  packages: ['ggplot2', 'dplyr']\nfilters:\n  - webr\n---\n\n\n## Introducción a los Autómatas Celulares (de Wolfram)\n\nLos Autómatas Celulares (AC) son sistemas dinámicos discretos y abstractos con aplicaciones en numerosos campos científicos. Se componen de una red de *células* que cambian de estado según reglas determinadas, a menudo con base en el estado de las células vecinas. Esta sencilla premisa puede generar una sorprendente variedad de comportamientos: desde patrones estáticos, hasta dinámicas complejas y caóticas.\n\nLos AC fueron introducidos por primera vez por el matemático [John von Neumann](https://en.wikipedia.org/wiki/John_von_Neumann) y el físico [Stanislaw Ulam](https://en.wikipedia.org/wiki/Stanis%C5%82aw_Ulam) en la década de 1960, pero fue el físico [Stephen Wolfram](https://en.wikipedia.org/wiki/Stephen_Wolfram) quien popularizó su [estudio en la década de 1980](https://www.wolframscience.com/nks/). Wolfram propuso una estructura unidimensional y un conjunto de reglas binarias simples para los AC, que se terminaron conociendo como los Autómatas Celulares de Wolfram (ACW). Este tipo de autómatas se han convertido en un modelo de referencia para el estudio de la complejidad y la emergencia de patrones en sistemas dinámicos.\n\n### Fundamentos Teóricos\n\nEn general, los AC basan su comportamiento en tres componentes principales:\n\n-   **Espacio de Células**: Una matriz (en nuestro caso, un vector) donde cada elemento representa una célula.\n-   **Estados**: Cada célula puede adoptar un estado de un conjunto finito de estados posibles. En este ejemplo, las células pueden estar activas (\"$1$\") o inactivas (\"$0$\").\n-   **Reglas de Evolución**: Las células cambian de estado según reglas determinadas, habitualmente con base en el estado de las células vecinas. Para los ACW, las células cambian de estado con base en su propio estado y el de las células que están a la izquierda y derecha de cada una de ellas mediante una regla binaria de 8 bits. Esta última se representa como un número entero entre 0 y 255.\n\n## Preparación del Entorno en R\n\nPara comenzar nuestra exploración de los Autómatas Celulares de Wolfram en R, primero necesitamos configurar nuestro entorno de trabajo cargando algunas bibliotecas esenciales. Estas bibliotecas nos ayudarán en la manipulación de datos y en la visualización gráfica de los resultados.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instalalas si aún no las tienes utilizando:\n# install.packages(c(\"dplyr\", \"ggplot2\", \"ggview\"))\n\nlibrary(dplyr) # para la manipulación de datos\nlibrary(ggplot2) # para la creación de gráficos\nlibrary(ggview) # para visualizar los gráficos en el Viewer sin guardarlos\n```\n:::\n\n\n## Definición de la Función para Reglas Binarias\n\nDespués de haber preparado nuestro entorno en R, el siguiente paso es definir cómo nuestro ACW interpretará las reglas que dictarán la evolución de sus células. Recordemos que en los ACW, estas reglas se aplican basándose en el estado actual de una célula y sus vecinos inmediatos a la izquierda y a la derecha.\n\nCada combinación de estos tres estados (el propio y los de sus dos vecinos) puede ser representada como un número binario de 3 dígitos, y para cada combinación posible, la regla del autómata define si la célula estará activa o inactiva en la siguiente generación. Dado que hay $2^{3} = 8$ combinaciones posibles, una regla de autómata celular se puede representar como una secuencia de 8 bits, donde cada bit indica el estado resultante para una combinación específica de vecinos. Por lo tanto, hay un total de $2^{8} = 256$ reglas posibles, numeradas del 0 al 255. \n\nLa función `getBinaryRule` que definiremos a continuación, toma un número entre 0 y 255 y lo convierte en su versión binaria de 8 bits. Aquí nos estamos aprovechando de que los números del 0 al 255 se representan con en binario con 8 dígitos y a partir del 256 con 9 o más. Esto nos permitirá aplicar fácilmente la regla elegida a nuestro autómata:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetBinaryRule <- function(ruleNumber) {\n  # Convierte el número en una secuencia de bits:\n  ruleBinary <- intToBits(ruleNumber)[1:8]\n  # Convierte la secuencia de bits en un vector de enteros:\n  ruleBinary <- as.integer(rev(ruleBinary))\n  return(ruleBinary)\n}\n```\n:::\n\n\nTras definir la función `getBinaryRule`, nuestro siguiente paso es establecer el escenario para la simulación de nuestro ACW. Esto implica inicializar las reglas que determinarán el comportamiento de las células y preparar la población inicial en nuestro modelo.\n\n## Inicialización de las Reglas y las Células\n\nComenzaremos eligiendo una regla específica para nuestro autómata. Recordemos que las reglas varían de 0 a 255, cada una produciendo patrones interesantes. Para este ejemplo, utilizaremos la regla 135, conocida por su comportamiento interesante:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecciona la regla número 135:\nruleNumber <- 135\n# Convierte la regla a su representación binaria:\nruleSet <- getBinaryRule(ruleNumber)\n# Establece el número de células y generaciones para la simulación:\nnumCells <- 101\ngenerations <- 101\n# Crea una matriz para representar cada generación de células:\ngrid <- matrix(nrow = generations, ncol = numCells)\n```\n:::\n\n\n## Configuración de la Población Inicial\n\nAhora, definiremos la población inicial de células. Para simplificar y visualizar claramente el efecto de la regla seleccionada, iniciaremos con una única célula activa en el centro de nuestra cuadrícula:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inicializa todas las células en estado inactivo (0):\ncells <- rep(0, numCells)\n# Activa la célula central:\ncells[ceiling(numCells / 2)] <- 1\n# Establece la configuración previa como la primera generación en nuestra matriz:\ngrid[1, ] <- cells\n```\n:::\n\n\nAsí, estamos en posición de simular cómo estas células evolucionarán a lo largo de las generaciones bajo la regla seleccionada. Este es el núcleo de los ACW, donde las simples reglas locales conducen a patrones complejos y a menudo sorprendentes a lo largo del tiempo.\n\n## Aplicación de las Reglas para Dar Paso a Nuevas Generaciones\n\nPara observar la evolución de nuestro autómata celular, aplicaremos las reglas definidas en cada célula y en cada generación. Recordemos que las reglas consideran el estado de una célula y sus vecinas inmediatas (izquierda y derecha) para determinar su nuevo estado. Este proceso se repite para cada célula en cada nueva generación:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bucle a través de cada generación, empezando por la segunda:\nfor (gen in 2:generations) {\n  # Bucle a través de cada célula en la generación:\n  for (i in 1:numCells) {\n    # Calcula los índices de las vecinas izquierda y derecha, \n    # considerando condiciones de frontera periódicas\n    # (si la célula está en el borde, la vecina es la primera o la última):\n    left_index <- ifelse(i == 1, numCells, i - 1)\n    right_index <- ifelse(i == numCells, 1, i + 1)\n\n    # Obtiene los estados de las vecinas y de la célula central:\n    left <- grid[gen - 1, left_index]\n    center <- grid[gen - 1, i]\n    right <- grid[gen - 1, right_index]\n\n    # Calcula el patrón de vecindario en versión entera (nota más adelante):\n    neighborhood <- left * 4 + center * 2 + right\n    # Determina el nuevo estado basado en la respectiva regla:\n    grid[gen, i] <- ruleSet[8 - neighborhood]\n  }\n}\n```\n:::\n\n\n::: {.callout-tip title=\"Nota\"}\nEl vecindario de una célula es una combinación de sus estados y los de sus dos vecinas. En los ACW, este vecindario se representa como un número binario de 3 dígitos. Por ejemplo, si una célula y sus vecinos están en los estados 1 (activo), 0 (inactivo), y 1 (activo), respectivamente, el vecindario se representa como 101 en binario.\n\nPara convertir esta representación binaria del vecindario en algo que podamos usar para acceder a nuestra regla en versión binaria, necesitamos convertirla a un número entero que vaya del 0 al 7. Aquí es donde entran en juego las multiplicaciones por 4 y por 2:\n\n-   El bit más a la izquierda (la vecina izquierda) se multiplica por 4 porque, en la representación binaria, este bit es equivalente a $2^{2} = 4$. Si este bit es 1, su contribución al número decimal total es 4.\n-   El bit del medio (la célula misma) se multiplica por 2 porque corresponde a $2^{1} = 2$ en binario. Si esta célula está activa, añade 2 al número decimal.\n-   El bit más a la derecha (la vecina derecha) no se multiplica porque representa $2^{0} = 1$. Así, su estado (activo o inactivo) se añade tal cual al número decimal.\n\n:::\n\nEste doble bucle, primero a través de las generaciones y luego a través de cada célula, es el corazón de nuestra simulación. En cada paso, estamos aplicando cada regla binaria para determinar el estado futuro de cada célula, basándonos en su estado actual y el de sus vecinos. Al final de este proceso, tendremos una representación completa de cómo las células evolucionan a lo largo del tiempo bajo la influencia de nuestra regla seleccionada.\n\n## Visualización de la Evolución de las Células\n\nPara visualizar la evolución de nuestro ACW, primero necesitamos transformar nuestros datos de la matriz `grid` en un formato adecuado para `{ggplot2}`. Lo hacemos creando un *data frame* que represente cada célula y su estado en cada generación:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crea un data frame con todas las combinaciones de células y generaciones:\ndf <- expand.grid(x = 1:numCells, y = 1:generations)\n# Asigna los valores de la cuadrícula al data frame, ajustando la estructura.\n# La transposición cambia las filas por columnas y viceversa para que cada\n# columna represente una generación y cada fila una célula.\n# La función as.vector() convierte la matriz en un vector para que podamos ir\n# asignando valores de generación en generación, como esta creado el data frame:\ndf$value <- as.vector(t(grid))\n# Ajusta el eje y para que las generaciones se muestren en el orden correcto\n# (de arriba a abajo):\ndf$y <- generations - df$y + 1\n```\n:::\n\n\nAhora que tenemos nuestros datos en el formato correcto, podemos proceder a visualizarlos utilizando `{ggplot2}`. Esta herramienta nos permite crear una representación gráfica clara y atractiva de cómo cambian las células a lo largo del tiempo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crea un gráfico con ggplot2:\nplot_acw <- ggplot(df, aes(x = x, y = y, fill = factor(value))) +\n  geom_tile() + # Crea un gráfico de mosaico\n  scale_fill_manual(values = c(\"white\", \"black\")) + # Define los colores\n  theme(legend.position = \"none\", # Elimina la leyenda\n        panel.grid = element_blank(), # Elimina las líneas de la cuadrícula\n        axis.title = element_blank(), # Elimina los títulos de los ejes\n        axis.text = element_blank(), # Elimina las etiquetas de los ejes\n        axis.ticks = element_blank(), # Elimina las marcas de los ejes\n        panel.background = element_blank(), # Elimina el fondo del panel\n        panel.border = element_blank()) # Elimina el borde del panel\n\n# Visualiza el gráfico en el Viewer de RStudio:\n#ggview(plot_acw, width=10, height = 10, dpi = 500, units = \"in\")\n\n# Guarda el gráfico como un archivo PNG:\n#ggsave(\"acw_135.png\", width=10, height = 10, dpi = 1000, units = \"in\")\n```\n:::\n\n\nEl resultado de todo lo anterior es una visualización de la evolución de nuestro ACW bajo la regla 135:\n\n![](acw_135.png)\n\n## Explorando el Espacio de Reglas\n\nYa que hemos visto cómo funciona un ACW bajo una regla específica, podemos explorar cómo cambia el comportamiento de nuestro sistema cuando cambiamos la regla. Para ello, a continuación y gracias a [`quarto-webr`](https://github.com/coatless/quarto-webr), podemos modificar y correr el siguiente chunk de código para explorar el espacio de reglas (0 a 255): solamente debemos cambiar el número de la regla dentro de la función `ACW` y darle clic a *Run Code:*\n\n```{webr-r}\n#| context: setup\nlibrary(dplyr) # para la manipulación de datos\nlibrary(ggplot2) # para la creación de gráficos\n\ngetBinaryRule <- function(ruleNumber) {\n  # Convierte el número en una secuencia de bits:\n  ruleBinary <- intToBits(ruleNumber)[1:8]\n  # Convierte la secuencia de bits en un vector de enteros:\n  ruleBinary <- as.integer(rev(ruleBinary))\n  return(ruleBinary)\n}\n\nACW <- function(Regla) {\n# Selecciona la regla número 135:\nruleNumber <- Regla\n# Convierte la regla a su representación binaria:\nruleSet <- getBinaryRule(ruleNumber)\n# Establece el número de células y generaciones para la simulación:\nnumCells <- 101\ngenerations <- 101\n# Crea una matriz para representar cada generación de células:\ngrid <- matrix(nrow = generations, ncol = numCells)\n\n# Inicializa todas las células en estado inactivo (0):\ncells <- rep(0, numCells)\n# Activa la célula central:\ncells[ceiling(numCells / 2)] <- 1\n# Establece la configuración previa como la primera generación en nuestra matriz:\ngrid[1, ] <- cells\n\n# Bucle a través de cada generación, empezando por la segunda:\nfor (gen in 2:generations) {\n  # Bucle a través de cada célula en la generación:\n  for (i in 1:numCells) {\n    # Calcula los índices de las vecinas izquierda y derecha, \n    # considerando condiciones de frontera periódicas\n    # (si la célula está en el borde, la vecina es la primera o la última):\n    left_index <- ifelse(i == 1, numCells, i - 1)\n    right_index <- ifelse(i == numCells, 1, i + 1)\n\n    # Obtiene los estados de las vecinas y de la célula central:\n    left <- grid[gen - 1, left_index]\n    center <- grid[gen - 1, i]\n    right <- grid[gen - 1, right_index]\n\n    # Calcula el patrón de vecindario en versión entera (nota más adelante):\n    neighborhood <- left * 4 + center * 2 + right\n    # Determina el nuevo estado basado en la respectiva regla:\n    grid[gen, i] <- ruleSet[8 - neighborhood]\n  }\n}\n\n# Crea un data frame con todas las combinaciones de células y generaciones:\ndf <- expand.grid(x = 1:numCells, y = 1:generations)\n# Asigna los valores de la cuadrícula al data frame, ajustando la estructura.\n# La transposición cambia las filas por columnas y viceversa para que cada\n# columna represente una generación y cada fila una célula.\n# La función as.vector() convierte la matriz en un vector para que podamos ir\n# asignando valores de generación en generación, como esta creado el data frame:\ndf$value <- as.vector(t(grid))\n# Ajusta el eje y para que las generaciones se muestren en el orden correcto\n# (de arriba a abajo):\ndf$y <- generations - df$y + 1\n\n# Crea un gráfico con ggplot2:\nplot_acw <- ggplot(df, aes(x = x, y = y, fill = factor(value))) +\n  geom_tile() + # Crea un gráfico de mosaico\n  scale_fill_manual(values = c(\"white\", \"black\")) + # Define los colores\n  theme(legend.position = \"none\", # Elimina la leyenda\n        panel.grid = element_blank(), # Elimina las líneas de la cuadrícula\n        axis.title = element_blank(), # Elimina los títulos de los ejes\n        axis.text = element_blank(), # Elimina las etiquetas de los ejes\n        axis.ticks = element_blank(), # Elimina las marcas de los ejes\n        panel.background = element_blank(), # Elimina el fondo del panel\n        panel.border = element_blank()) # Elimina el borde del panel\n\nreturn(plot_acw)\n}\n```\n\n```{webr-r}\nACW(77)\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}